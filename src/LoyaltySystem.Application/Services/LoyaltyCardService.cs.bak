using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using LoyaltySystem.Application.DTOs;
using LoyaltySystem.Application.Interfaces;
using LoyaltySystem.Domain.Common;
using LoyaltySystem.Domain.Entities;
using LoyaltySystem.Domain.Enums;
using LoyaltySystem.Domain.Repositories;

namespace LoyaltySystem.Application.Services
{
    public class LoyaltyCardService : ILoyaltyCardService
    {
        private readonly ILoyaltyCardRepository _cardRepository;
        private readonly ILoyaltyProgramRepository _programRepository;
        private readonly ICustomerRepository _customerRepository;
        private readonly IUnitOfWork _unitOfWork;
        private readonly ILogger<LoyaltyCardService> _logger;

        public LoyaltyCardService(
            ILoyaltyCardRepository cardRepository,
            ILoyaltyProgramRepository programRepository,
            ICustomerRepository customerRepository,
            IUnitOfWork unitOfWork,
            ILogger<LoyaltyCardService> logger)
        {
            _cardRepository = cardRepository ?? throw new ArgumentNullException(nameof(cardRepository));
            _programRepository = programRepository ?? throw new ArgumentNullException(nameof(programRepository));
            _customerRepository = customerRepository ?? throw new ArgumentNullException(nameof(customerRepository));
            _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public async Task<OperationResult<LoyaltyCardDto>> GetByIdAsync(LoyaltyCardId id)
        {
            try
            {
                var card = await _cardRepository.GetByIdAsync(id);
                if (card == null)
                {
                    return OperationResult<LoyaltyCardDto>.FailureResult($"Card with ID {id} not found");
                }

                return OperationResult<LoyaltyCardDto>.SuccessResult(MapToDto(card));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving card with ID {CardId}", id);
                return OperationResult<LoyaltyCardDto>.FailureResult($"Error retrieving card: {ex.Message}");
            }
        }

        public async Task<OperationResult<LoyaltyCardDto>> GetByQrCodeAsync(string qrCode)
        {
            try
            {
                var card = await _cardRepository.GetByQrCodeAsync(qrCode);
                if (card == null)
                {
                    return OperationResult<LoyaltyCardDto>.Failure("Card not found");
                }

                return OperationResult<LoyaltyCardDto>.Success(MapToDto(card));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting card by QR code {QrCode}", qrCode);
                return OperationResult<LoyaltyCardDto>.Failure($"Error retrieving card: {ex.Message}");
            }
        }

        public async Task<OperationResult<IEnumerable<LoyaltyCardDto>>> GetByCustomerIdAsync(CustomerId customerId)
        {
            try
            {
                var cards = await _cardRepository.GetByCustomerIdAsync(customerId);
                return OperationResult<IEnumerable<LoyaltyCardDto>>.Success(cards.Select(MapToDto));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting cards for customer {CustomerId}", customerId);
                return OperationResult<IEnumerable<LoyaltyCardDto>>.Failure($"Error retrieving cards: {ex.Message}");
            }
        }

        public async Task<OperationResult<IEnumerable<LoyaltyCardDto>>> GetByProgramIdAsync(LoyaltyProgramId programId)
        {
            try
            {
                var cards = await _cardRepository.GetByProgramIdAsync(programId);
                return OperationResult<IEnumerable<LoyaltyCardDto>>.Success(cards.Select(MapToDto));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting cards for program {ProgramId}", programId);
                return OperationResult<IEnumerable<LoyaltyCardDto>>.Failure($"Error retrieving cards: {ex.Message}");
            }
        }

        public async Task<OperationResult<LoyaltyCardDto>> CreateCardAsync(CustomerId customerId, LoyaltyProgramId programId)
        {
            try
            {
                // Check if customer exists
                var customer = await _customerRepository.GetByIdAsync(customerId);
                if (customer == null)
                {
                    return OperationResult<LoyaltyCardDto>.Failure("Customer not found");
                }

                // Check if program exists
                var program = await _programRepository.GetByIdAsync(programId);
                if (program == null)
                {
                    return OperationResult<LoyaltyCardDto>.Failure("Loyalty program not found");
                }

                // Check if customer already has a card for this program
                var existingCards = await _cardRepository.GetByCustomerIdAsync(customerId);
                if (existingCards.Any(c => c.ProgramId == programId))
                {
                    return OperationResult<LoyaltyCardDto>.Failure("Customer already enrolled in this program");
                }

                // Create new card
                var card = new LoyaltyCard
                {
                    Id = LoyaltyCardId.New(),
                    CustomerId = customerId,
                    ProgramId = programId,
                    Status = CardStatus.Active,
                    Balance = 0,
                    StampCount = 0,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                await _cardRepository.AddAsync(card);
                await _unitOfWork.SaveChangesAsync();

                return OperationResult<LoyaltyCardDto>.Success(MapToDto(card));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating card for customer {CustomerId} in program {ProgramId}", customerId, programId);
                return OperationResult<LoyaltyCardDto>.Failure($"Error creating card: {ex.Message}");
            }
        }

        public async Task<OperationResult<LoyaltyCardDto>> UpdateCardStatusAsync(LoyaltyCardId id, CardStatus status)
        {
            try
            {
                var card = await _cardRepository.GetByIdAsync(id);
                if (card == null)
                {
                    return OperationResult<LoyaltyCardDto>.Failure("Card not found");
                }

                card.Status = status;
                card.UpdatedAt = DateTime.UtcNow;

                await _cardRepository.UpdateAsync(card);
                await _unitOfWork.SaveChangesAsync();

                return OperationResult<LoyaltyCardDto>.Success(MapToDto(card));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating card status for {CardId} to {Status}", id, status);
                return OperationResult<LoyaltyCardDto>.Failure($"Error updating card status: {ex.Message}");
            }
        }

        public async Task<OperationResult<TransactionDto>> IssueStampsAsync(LoyaltyCardId cardId, int stampCount, StoreId storeId, decimal purchaseAmount, string transactionReference)
        {
            try
            {
                var card = await _cardRepository.GetByIdAsync(cardId);
                if (card == null)
                {
                    return OperationResult<TransactionDto>.Failure("Card not found");
                }

                if (card.Status != CardStatus.Active)
                {
                    return OperationResult<TransactionDto>.Failure($"Card is not active. Current status: {card.Status}");
                }

                var program = await _programRepository.GetByIdAsync(card.ProgramId);
                if (program == null)
                {
                    return OperationResult<TransactionDto>.Failure("Program not found");
                }

                // Create transaction
                var transaction = new Transaction
                {
                    Id = TransactionId.New(),
                    CardId = cardId,
                    Type = TransactionType.StampIssuance,
                    StampCount = stampCount,
                    Points = 0,
                    Amount = purchaseAmount,
                    StoreId = storeId,
                    PosReference = transactionReference,
                    CreatedAt = DateTime.UtcNow
                };

                // Update card
                card.StampCount += stampCount;
                card.UpdatedAt = DateTime.UtcNow;

                await _unitOfWork.TransactionRepository.AddAsync(transaction);
                await _cardRepository.UpdateAsync(card);
                await _unitOfWork.SaveChangesAsync();

                return OperationResult<TransactionDto>.Success(MapToTransactionDto(transaction));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error issuing stamps for card {CardId}", cardId);
                return OperationResult<TransactionDto>.Failure($"Error issuing stamps: {ex.Message}");
            }
        }

        public async Task<OperationResult<TransactionDto>> AddPointsAsync(LoyaltyCardId cardId, decimal points, decimal transactionAmount, StoreId storeId, Guid? staffId, string posTransactionId)
        {
            try
            {
                var card = await _cardRepository.GetByIdAsync(cardId);
                if (card == null)
                {
                    return OperationResult<TransactionDto>.Failure("Card not found");
                }

                if (card.Status != CardStatus.Active)
                {
                    return OperationResult<TransactionDto>.Failure($"Card is not active. Current status: {card.Status}");
                }

                // Create transaction
                var transaction = new Transaction
                {
                    Id = TransactionId.New(),
                    CardId = cardId,
                    Type = TransactionType.PointsIssuance,
                    Points = points,
                    Amount = transactionAmount,
                    StoreId = storeId,
                    StaffId = staffId,
                    PosReference = posTransactionId,
                    CreatedAt = DateTime.UtcNow
                };

                // Update card
                card.Balance += points;
                card.UpdatedAt = DateTime.UtcNow;

                await _unitOfWork.TransactionRepository.AddAsync(transaction);
                await _cardRepository.UpdateAsync(card);
                await _unitOfWork.SaveChangesAsync();

                return OperationResult<TransactionDto>.Success(MapToTransactionDto(transaction));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error adding points to card {CardId}", cardId);
                return OperationResult<TransactionDto>.Failure($"Error adding points: {ex.Message}");
            }
        }

        public async Task<OperationResult<TransactionDto>> RedeemRewardAsync(LoyaltyCardId cardId, RewardId rewardId, StoreId storeId, Guid? staffId, RedeemRequestData redemptionData)
        {
            try
            {
                var card = await _cardRepository.GetByIdAsync(cardId);
                if (card == null)
                {
                    return OperationResult<TransactionDto>.Failure("Card not found");
                }

                if (card.Status != CardStatus.Active)
                {
                    return OperationResult<TransactionDto>.Failure($"Card is not active. Current status: {card.Status}");
                }

                var reward = await _unitOfWork.RewardRepository.GetByIdAsync(rewardId);
                if (reward == null)
                {
                    return OperationResult<TransactionDto>.Failure("Reward not found");
                }

                if (reward.ProgramId != card.ProgramId)
                {
                    return OperationResult<TransactionDto>.Failure("Reward does not belong to the card's program");
                }

                // Check if reward is active
                if (!reward.IsActive)
                {
                    return OperationResult<TransactionDto>.Failure("Reward is not active");
                }

                // Check if reward is within valid date range
                var now = DateTime.UtcNow;
                if (reward.StartDate.HasValue && reward.StartDate.Value > now)
                {
                    return OperationResult<TransactionDto>.Failure("Reward is not yet available");
                }

                if (reward.EndDate.HasValue && reward.EndDate.Value < now)
                {
                    return OperationResult<TransactionDto>.Failure("Reward has expired");
                }

                // Check if card has enough points/stamps
                if (reward.RequiredPoints > 0 && card.Balance < reward.RequiredPoints)
                {
                    return OperationResult<TransactionDto>.Failure($"Insufficient points. Required: {reward.RequiredPoints}, Available: {card.Balance}");
                }

                if (reward.RequiredStamps > 0 && card.StampCount < reward.RequiredStamps)
                {
                    return OperationResult<TransactionDto>.Failure($"Insufficient stamps. Required: {reward.RequiredStamps}, Available: {card.StampCount}");
                }

                // Create transaction
                var transaction = new Transaction
                {
                    Id = TransactionId.New(),
                    CardId = cardId,
                    Type = TransactionType.Redemption,
                    RewardId = rewardId,
                    Points = reward.RequiredPoints > 0 ? -reward.RequiredPoints : 0,
                    StampCount = reward.RequiredStamps > 0 ? -reward.RequiredStamps : 0,
                    StoreId = storeId,
                    StaffId = staffId,
                    CreatedAt = DateTime.UtcNow
                };

                // Update card
                if (reward.RequiredPoints > 0)
                {
                    card.Balance -= reward.RequiredPoints;
                }

                if (reward.RequiredStamps > 0)
                {
                    card.StampCount -= reward.RequiredStamps;
                }

                card.UpdatedAt = DateTime.UtcNow;

                await _unitOfWork.TransactionRepository.AddAsync(transaction);
                await _cardRepository.UpdateAsync(card);
                await _unitOfWork.SaveChangesAsync();

                return OperationResult<TransactionDto>.Success(MapToTransactionDto(transaction));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error redeeming reward {RewardId} for card {CardId}", rewardId, cardId);
                return OperationResult<TransactionDto>.Failure($"Error redeeming reward: {ex.Message}");
            }
        }

        public async Task<OperationResult<string>> GenerateQrCodeAsync(LoyaltyCardId cardId)
        {
            try
            {
                var card = await _cardRepository.GetByIdAsync(cardId);
                if (card == null)
                {
                    return OperationResult<string>.Failure("Card not found");
                }

                // Generate a unique QR code
                var qrCode = Guid.NewGuid().ToString("N");
                
                card.QrCode = qrCode;
                card.UpdatedAt = DateTime.UtcNow;

                await _cardRepository.UpdateAsync(card);
                await _unitOfWork.SaveChangesAsync();

                return OperationResult<string>.Success(qrCode);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating QR code for card {CardId}", cardId);
                return OperationResult<string>.Failure($"Error generating QR code: {ex.Message}");
            }
        }

        public async Task<OperationResult<string>> GetOrGenerateQrCodeAsync(LoyaltyCardId cardId)
        {
            try
            {
                var card = await _cardRepository.GetByIdAsync(cardId);
                if (card == null)
                {
                    return OperationResult<string>.Failure("Card not found");
                }

                if (!string.IsNullOrEmpty(card.QrCode))
                {
                    return OperationResult<string>.Success(card.QrCode);
                }

                return await GenerateQrCodeAsync(cardId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting or generating QR code for card {CardId}", cardId);
                return OperationResult<string>.Failure($"Error with QR code: {ex.Message}");
            }
        }

        public async Task<OperationResult<IEnumerable<TransactionDto>>> GetCardTransactionsAsync(LoyaltyCardId cardId)
        {
            try
            {
                var card = await _cardRepository.GetByIdAsync(cardId);
                if (card == null)
                {
                    return OperationResult<IEnumerable<TransactionDto>>.Failure("Card not found");
                }

                var transactions = await _unitOfWork.TransactionRepository.GetByCardIdAsync(cardId);
                return OperationResult<IEnumerable<TransactionDto>>.Success(transactions.Select(MapToTransactionDto));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting transactions for card {CardId}", cardId);
                return OperationResult<IEnumerable<TransactionDto>>.Failure($"Error retrieving transactions: {ex.Message}");
            }
        }

        public async Task<OperationResult<Dictionary<CardStatus, int>>> GetCardCountByStatusAsync()
        {
            try
            {
                var counts = await _cardRepository.GetCardCountByStatusAsync();
                return OperationResult<Dictionary<CardStatus, int>>.Success(counts);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting card counts by status");
                return OperationResult<Dictionary<CardStatus, int>>.Failure($"Error retrieving card counts: {ex.Message}");
            }
        }

        public async Task<OperationResult<ProgramAnalyticsDto>> GetProgramCardAnalyticsAsync(LoyaltyProgramId programId)
        {
            try
            {
                var program = await _programRepository.GetByIdAsync(programId);
                if (program == null)
                {
                    return OperationResult<ProgramAnalyticsDto>.FailureResult("Program not found");
                }

                var cards = await _cardRepository.GetByProgramIdAsync(programId);
                
                // Get analytics data
                var analytics = new ProgramAnalyticsDto
                {
                    TotalPrograms = 1,
                    ActivePrograms = program.IsActive ? 1 : 0,
                    StampPrograms = program.Type == LoyaltyProgramType.Stamp ? 1 : 0,
                    PointsPrograms = program.Type == LoyaltyProgramType.Points ? 1 : 0,
                    TotalRewards = 0, // For now
                    ActiveRewards = 0, // For now
                    ProgramsByBrand = new Dictionary<string, int> { { program.BrandId.ToString(), 1 } }
                };

                return OperationResult<ProgramAnalyticsDto>.SuccessResult(analytics);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting program card analytics for program {ProgramId}", programId);
                return OperationResult<ProgramAnalyticsDto>.FailureResult($"Error retrieving program analytics: {ex.Message}");
            }
        }

        public async Task<int> GetActiveCardCountForProgramAsync(string programId)
        {
            try
            {
                var programIdObj = new LoyaltyProgramId(Guid.Parse(programId));
                var cards = await _cardRepository.GetByProgramIdAsync(programIdObj);
                return cards.Count(c => c.Status == CardStatus.Active);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving active card count for program {ProgramId}", programId);
                return 0;
            }
        }

        public async Task<int> GetCardCountForProgramAsync(string programId)
        {
            try
            {
                var programIdObj = new LoyaltyProgramId(Guid.Parse(programId));
                var cards = await _cardRepository.GetByProgramIdAsync(programIdObj);
                return cards.Count();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving card count for program {ProgramId}", programId);
                return 0;
            }
        }

        public async Task<decimal> GetAverageTransactionsPerCardForProgramAsync(string programId)
        {
            try
            {
                var programIdObj = new LoyaltyProgramId(Guid.Parse(programId));
                var cards = await _cardRepository.GetByProgramIdAsync(programIdObj);
                
                if (!cards.Any())
                {
                    return 0;
                }
                
                // Since we don't have access to transactions, we'll return 0
                return 0;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error calculating average transactions per card for program {ProgramId}", programId);
                return 0;
            }
        }

        private LoyaltyCardDto MapToDto(LoyaltyCard card)
        {
            return new LoyaltyCardDto
            {
                Id = card.Id.ToString(),
                CustomerId = card.CustomerId.ToString(),
                ProgramId = card.ProgramId.ToString(),
                Status = card.Status.ToString(),
                Balance = card.Balance,
                StampCount = card.StampCount,
                QrCode = card.QrCode,
                CreatedAt = card.CreatedAt,
                UpdatedAt = card.UpdatedAt,
                ExpiresAt = card.ExpiresAt
            };
        }

        private TransactionDto MapToTransactionDto(Transaction transaction)
        {
            return new TransactionDto
            {
                Id = transaction.Id.ToString(),
                CardId = transaction.CardId.ToString(),
                Type = transaction.Type.ToString(),
                Points = transaction.Points,
                StampCount = transaction.StampCount,
                Amount = transaction.Amount,
                StoreId = transaction.StoreId?.ToString(),
                StaffId = transaction.StaffId,
                RewardId = transaction.RewardId?.ToString(),
                PosReference = transaction.PosReference,
                CreatedAt = transaction.CreatedAt
            };
        }
    }
} 