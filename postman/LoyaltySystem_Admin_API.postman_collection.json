{
	"info": {
		"_postman_id": "b7a8f1e2-5f6c-4d8a-a6b1-ef8d12c35d93",
		"name": "LoyaltySystem - Admin API",
		"description": "API collection for the Admin API in the Loyalty System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login (Get Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"authToken\", jsonData.token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is present\", function () {",
									"    pm.expect(jsonData.token).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"Admin123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login to get the authentication token"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints to get access token"
		},
		{
			"name": "Business Management",
			"item": [
				{
					"name": "Get All Businesses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has items array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.exist;",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response has correct pagination fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.totalCount).to.exist;",
									"    pm.expect(jsonData.pageNumber).to.exist;",
									"    pm.expect(jsonData.pageSize).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/business?page=1&pageSize=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"business"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								}
							]
						},
						"description": "Get a paginated list of all businesses"
					},
					"response": []
				},
				{
					"name": "Get Business by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Business has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.description).to.exist;",
									"    pm.expect(jsonData.taxId).to.exist;",
									"    pm.expect(jsonData.contact).to.exist;",
									"    pm.expect(jsonData.headquartersAddress).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/business/{{businessId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"business",
								"{{businessId}}"
							]
						},
						"description": "Get a business by its ID"
					},
					"response": []
				},
				{
					"name": "Create Business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has business ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"businessId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Coffee Chain Inc.\",\n    \"description\": \"Premium coffee shop chain\",\n    \"taxId\": \"TAX123456789\",\n    \"contact\": {\n        \"email\": \"info@coffeechain.com\",\n        \"phone\": \"+1-555-123-4567\",\n        \"website\": \"https://coffeechain.com\"\n    },\n    \"headquartersAddress\": {\n        \"line1\": \"123 Business Street\",\n        \"line2\": \"Suite 500\",\n        \"city\": \"Seattle\",\n        \"state\": \"WA\",\n        \"postalCode\": \"98101\",\n        \"country\": \"USA\"\n    },\n    \"logo\": \"https://example.com/coffeechain-logo.png\",\n    \"website\": \"https://coffeechain.com\",\n    \"foundedDate\": \"2005-03-15T00:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/business",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"business"
							]
						},
						"description": "Create a new business"
					},
					"response": []
				},
				{
					"name": "Update Business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Business has updated fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var requestData = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.name).to.eql(requestData.name);",
									"    pm.expect(jsonData.description).to.eql(requestData.description);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Coffee Chain Inc. - Updated\",\n    \"description\": \"Premium coffee shop chain with organic options\",\n    \"taxId\": \"TAX123456789\",\n    \"contact\": {\n        \"email\": \"info@coffeechain.com\",\n        \"phone\": \"+1-555-123-4567\",\n        \"website\": \"https://coffeechain.com\"\n    },\n    \"headquartersAddress\": {\n        \"line1\": \"123 Business Street\",\n        \"line2\": \"Suite 500\",\n        \"city\": \"Seattle\",\n        \"state\": \"WA\",\n        \"postalCode\": \"98101\",\n        \"country\": \"USA\"\n    },\n    \"logo\": \"https://example.com/coffeechain-logo-new.png\",\n    \"website\": \"https://coffeechain.com\",\n    \"foundedDate\": \"2005-03-15T00:00:00Z\",\n    \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/business/{{businessId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"business",
								"{{businessId}}"
							]
						},
						"description": "Update an existing business"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing businesses"
		},
		{
			"name": "Brand Management",
			"item": [
				{
					"name": "Get All Brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has items array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.exist;",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/brands?page=1&pageSize=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"brands"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								}
							]
						},
						"description": "Get a paginated list of all brands"
					},
					"response": []
				},
				{
					"name": "Get Brand by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Brand has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.category).to.exist;",
									"    pm.expect(jsonData.logo).to.exist;",
									"    pm.expect(jsonData.description).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/brands/{{brandId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"brands",
								"{{brandId}}"
							]
						},
						"description": "Get a brand by its ID"
					},
					"response": []
				},
				{
					"name": "Create Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has brand ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"brandId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Coffee Express\",\n    \"category\": \"Cafe\",\n    \"logo\": \"https://example.com/coffee-express-logo.png\",\n    \"description\": \"Fast and delicious coffee\",\n    \"contactInfo\": {\n        \"email\": \"contact@coffeeexpress.com\",\n        \"phone\": \"+1-555-234-5678\",\n        \"website\": \"https://coffeeexpress.com\"\n    },\n    \"address\": {\n        \"line1\": \"456 Brand Avenue\",\n        \"line2\": \"Floor 3\",\n        \"city\": \"Seattle\",\n        \"state\": \"WA\",\n        \"postalCode\": \"98102\",\n        \"country\": \"USA\"\n    },\n    \"businessId\": \"{{businessId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/brands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"brands"
							]
						},
						"description": "Create a new brand"
					},
					"response": []
				},
				{
					"name": "Update Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated brand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Coffee Express Updated\",\n    \"category\": \"Premium Cafe\",\n    \"logo\": \"https://example.com/coffee-express-updated-logo.png\",\n    \"description\": \"Premium fast and delicious coffee\",\n    \"contactInfo\": {\n        \"email\": \"contact@coffeeexpress.com\",\n        \"phone\": \"+1-555-234-5678\",\n        \"website\": \"https://coffeeexpress.com\"\n    },\n    \"address\": {\n        \"line1\": \"456 Brand Avenue\",\n        \"line2\": \"Floor 3\",\n        \"city\": \"Seattle\",\n        \"state\": \"WA\",\n        \"postalCode\": \"98102\",\n        \"country\": \"USA\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/brands/{{brandId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"brands",
								"{{brandId}}"
							]
						},
						"description": "Update an existing brand"
					},
					"response": []
				},
				{
					"name": "Delete Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/brands/{{brandId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"brands",
								"{{brandId}}"
							]
						},
						"description": "Delete a brand by ID"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing brands"
		},
		{
			"name": "Store Management",
			"item": [
				{
					"name": "Get All Stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has items array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.exist;",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/stores?page=1&pageSize=20&brandId={{brandId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"stores"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								},
								{
									"key": "brandId",
									"value": "{{brandId}}",
									"description": "Optional filter by brand"
								}
							]
						},
						"description": "Get a paginated list of all stores"
					},
					"response": []
				},
				{
					"name": "Get Store by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Store has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.brandId).to.exist;",
									"    pm.expect(jsonData.address).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"stores",
								"{{storeId}}"
							]
						},
						"description": "Get a store by its ID"
					},
					"response": []
				},
				{
					"name": "Create Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has store ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"storeId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Coffee Express - Downtown\",\n    \"brandId\": \"{{brandId}}\",\n    \"storeCode\": \"CE-DT-001\",\n    \"phone\": \"+1-555-789-0123\",\n    \"email\": \"downtown@coffeeexpress.com\",\n    \"address\": {\n        \"line1\": \"123 Main Street\",\n        \"line2\": \"Suite 101\",\n        \"city\": \"Seattle\",\n        \"state\": \"WA\",\n        \"postalCode\": \"98104\",\n        \"country\": \"USA\"\n    },\n    \"location\": {\n        \"latitude\": 47.6062,\n        \"longitude\": -122.3321\n    },\n    \"hoursOfOperation\": [\n        {\n            \"dayOfWeek\": \"Monday\",\n            \"openTime\": \"07:00\",\n            \"closeTime\": \"20:00\"\n        },\n        {\n            \"dayOfWeek\": \"Tuesday\",\n            \"openTime\": \"07:00\",\n            \"closeTime\": \"20:00\"\n        },\n        {\n            \"dayOfWeek\": \"Wednesday\",\n            \"openTime\": \"07:00\",\n            \"closeTime\": \"20:00\"\n        },\n        {\n            \"dayOfWeek\": \"Thursday\",\n            \"openTime\": \"07:00\",\n            \"closeTime\": \"20:00\"\n        },\n        {\n            \"dayOfWeek\": \"Friday\",\n            \"openTime\": \"07:00\",\n            \"closeTime\": \"22:00\"\n        },\n        {\n            \"dayOfWeek\": \"Saturday\",\n            \"openTime\": \"08:00\",\n            \"closeTime\": \"22:00\"\n        },\n        {\n            \"dayOfWeek\": \"Sunday\",\n            \"openTime\": \"08:00\",\n            \"closeTime\": \"18:00\"\n        }\n    ],\n    \"amenities\": [\"WiFi\", \"Outdoor Seating\", \"Power Outlets\", \"Restrooms\"],\n    \"openDate\": \"2020-03-15\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"stores"
							]
						},
						"description": "Create a new store"
					},
					"response": []
				},
				{
					"name": "Update Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated store\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Coffee Express - Downtown Seattle\",\n    \"brandId\": \"{{brandId}}\",\n    \"storeCode\": \"CE-DT-001\",\n    \"phone\": \"+1-555-789-0123\",\n    \"email\": \"downtown.seattle@coffeeexpress.com\",\n    \"address\": {\n        \"line1\": \"123 Main Street\",\n        \"line2\": \"Suite 101\",\n        \"city\": \"Seattle\",\n        \"state\": \"WA\",\n        \"postalCode\": \"98104\",\n        \"country\": \"USA\"\n    },\n    \"location\": {\n        \"latitude\": 47.6062,\n        \"longitude\": -122.3321\n    },\n    \"hoursOfOperation\": [\n        {\n            \"dayOfWeek\": \"Monday\",\n            \"openTime\": \"06:30\",\n            \"closeTime\": \"21:00\"\n        },\n        {\n            \"dayOfWeek\": \"Tuesday\",\n            \"openTime\": \"06:30\",\n            \"closeTime\": \"21:00\"\n        },\n        {\n            \"dayOfWeek\": \"Wednesday\",\n            \"openTime\": \"06:30\",\n            \"closeTime\": \"21:00\"\n        },\n        {\n            \"dayOfWeek\": \"Thursday\",\n            \"openTime\": \"06:30\",\n            \"closeTime\": \"21:00\"\n        },\n        {\n            \"dayOfWeek\": \"Friday\",\n            \"openTime\": \"06:30\",\n            \"closeTime\": \"22:00\"\n        },\n        {\n            \"dayOfWeek\": \"Saturday\",\n            \"openTime\": \"07:30\",\n            \"closeTime\": \"22:00\"\n        },\n        {\n            \"dayOfWeek\": \"Sunday\",\n            \"openTime\": \"07:30\",\n            \"closeTime\": \"19:00\"\n        }\n    ],\n    \"amenities\": [\"WiFi\", \"Outdoor Seating\", \"Power Outlets\", \"Restrooms\", \"Drive-Through\"],\n    \"openDate\": \"2020-03-15\",\n    \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"stores",
								"{{storeId}}"
							]
						},
						"description": "Update an existing store"
					},
					"response": []
				},
				{
					"name": "Delete Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"stores",
								"{{storeId}}"
							]
						},
						"description": "Delete a store by ID"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing store locations"
		},
		{
			"name": "Customer Management",
			"item": [],
			"description": "Endpoints for managing customers"
		},
		{
			"name": "Loyalty Program Management",
			"item": [
				{
					"name": "Get All Loyalty Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has items array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.exist;",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/loyalty-programs?page=1&pageSize=20&brandId={{brandId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"loyalty-programs"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								},
								{
									"key": "brandId",
									"value": "{{brandId}}",
									"description": "Optional filter by brand"
								}
							]
						},
						"description": "Get a paginated list of all loyalty programs"
					},
					"response": []
				},
				{
					"name": "Get Loyalty Program by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Program has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.brandId).to.exist;",
									"    pm.expect(jsonData.pointsConfig).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/loyalty-programs/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"loyalty-programs",
								"{{programId}}"
							]
						},
						"description": "Get a loyalty program by its ID"
					},
					"response": []
				},
				{
					"name": "Create Loyalty Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has program ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"programId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Coffee Express Rewards\",\n    \"description\": \"Earn points with every purchase and redeem for free items\",\n    \"brandId\": \"{{brandId}}\",\n    \"startDate\": \"2023-01-01T00:00:00Z\",\n    \"endDate\": null,\n    \"status\": \"Active\",\n    \"termsAndConditions\": \"Terms and conditions apply. Points expire after 12 months of inactivity.\",\n    \"pointsConfig\": {\n        \"pointsPerDollar\": 10,\n        \"minimumPointsForRedemption\": 500,\n        \"pointsRoundingRule\": \"RoundUp\",\n        \"expirationPolicy\": {\n            \"type\": \"Rolling\",\n            \"durationInDays\": 365\n        }\n    },\n    \"tiers\": [\n        {\n            \"name\": \"Bronze\",\n            \"pointThreshold\": 0,\n            \"benefits\": [\n                \"Earn 10 points per $1 spent\",\n                \"Free birthday item\"\n            ]\n        },\n        {\n            \"name\": \"Silver\",\n            \"pointThreshold\": 5000,\n            \"benefits\": [\n                \"Earn 12 points per $1 spent\",\n                \"Free birthday item\",\n                \"Free size upgrade on any drink\"\n            ]\n        },\n        {\n            \"name\": \"Gold\",\n            \"pointThreshold\": 10000,\n            \"benefits\": [\n                \"Earn 15 points per $1 spent\",\n                \"Free birthday item\",\n                \"Free size upgrade on any drink\",\n                \"Free coffee on Mondays\"\n            ]\n        }\n    ],\n    \"enrollmentBonusPoints\": 100\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/loyalty-programs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"loyalty-programs"
							]
						},
						"description": "Create a new loyalty program"
					},
					"response": []
				},
				{
					"name": "Update Loyalty Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated program\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Coffee Express Premium Rewards\",\n    \"description\": \"Earn points with every purchase and redeem for free items and exclusive perks\",\n    \"brandId\": \"{{brandId}}\",\n    \"startDate\": \"2023-01-01T00:00:00Z\",\n    \"endDate\": null,\n    \"status\": \"Active\",\n    \"termsAndConditions\": \"Terms and conditions apply. Points expire after 12 months of inactivity.\",\n    \"pointsConfig\": {\n        \"pointsPerDollar\": 12,\n        \"minimumPointsForRedemption\": 500,\n        \"pointsRoundingRule\": \"RoundUp\",\n        \"expirationPolicy\": {\n            \"type\": \"Rolling\",\n            \"durationInDays\": 365\n        }\n    },\n    \"tiers\": [\n        {\n            \"name\": \"Bronze\",\n            \"pointThreshold\": 0,\n            \"benefits\": [\n                \"Earn 12 points per $1 spent\",\n                \"Free birthday item\"\n            ]\n        },\n        {\n            \"name\": \"Silver\",\n            \"pointThreshold\": 5000,\n            \"benefits\": [\n                \"Earn 15 points per $1 spent\",\n                \"Free birthday item\",\n                \"Free size upgrade on any drink\"\n            ]\n        },\n        {\n            \"name\": \"Gold\",\n            \"pointThreshold\": 10000,\n            \"benefits\": [\n                \"Earn 18 points per $1 spent\",\n                \"Free birthday item\",\n                \"Free size upgrade on any drink\",\n                \"Free coffee on Mondays\"\n            ]\n        },\n        {\n            \"name\": \"Platinum\",\n            \"pointThreshold\": 20000,\n            \"benefits\": [\n                \"Earn 20 points per $1 spent\",\n                \"Free birthday item\",\n                \"Free size upgrade on any drink\",\n                \"Free coffee on Mondays\",\n                \"Priority line access\",\n                \"Exclusive seasonal items\"\n            ]\n        }\n    ],\n    \"enrollmentBonusPoints\": 200\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/loyalty-programs/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"loyalty-programs",
								"{{programId}}"
							]
						},
						"description": "Update an existing loyalty program"
					},
					"response": []
				},
				{
					"name": "Delete Loyalty Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/loyalty-programs/{{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"loyalty-programs",
								"{{programId}}"
							]
						},
						"description": "Delete a loyalty program by ID"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing loyalty programs"
		},
		{
			"name": "Reward Management",
			"item": [
				{
					"name": "Get All Rewards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has items array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.exist;",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/rewards?page=1&pageSize=20&programId={{programId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rewards"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								},
								{
									"key": "programId",
									"value": "{{programId}}",
									"description": "Filter by loyalty program"
								}
							]
						},
						"description": "Get a paginated list of all rewards"
					},
					"response": []
				},
				{
					"name": "Get Reward by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Reward has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.programId).to.exist;",
									"    pm.expect(jsonData.pointsCost).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/rewards/{{rewardId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rewards",
								"{{rewardId}}"
							]
						},
						"description": "Get a reward by its ID"
					},
					"response": []
				},
				{
					"name": "Create Reward",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has reward ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"rewardId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Free Medium Coffee\",\n    \"description\": \"Redeem points for a free medium coffee of your choice\",\n    \"programId\": \"{{programId}}\",\n    \"pointsCost\": 500,\n    \"category\": \"Beverage\",\n    \"startDate\": \"2023-01-01T00:00:00Z\",\n    \"endDate\": null,\n    \"status\": \"Active\",\n    \"image\": \"https://example.com/rewards/free-coffee.png\",\n    \"termsAndConditions\": \"Valid for one medium coffee. Cannot be combined with other offers.\",\n    \"expirationDays\": 30,\n    \"isRecurring\": true,\n    \"recurringLimit\": null,\n    \"memberLimit\": null,\n    \"totalLimit\": null\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/rewards",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rewards"
							]
						},
						"description": "Create a new reward"
					},
					"response": []
				},
				{
					"name": "Update Reward",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated reward\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Free Any Size Coffee\",\n    \"description\": \"Redeem points for a free coffee of any size\",\n    \"programId\": \"{{programId}}\",\n    \"pointsCost\": 600,\n    \"category\": \"Beverage\",\n    \"startDate\": \"2023-01-01T00:00:00Z\",\n    \"endDate\": null,\n    \"status\": \"Active\",\n    \"image\": \"https://example.com/rewards/free-coffee-updated.png\",\n    \"termsAndConditions\": \"Valid for one coffee of any size. Cannot be combined with other offers.\",\n    \"expirationDays\": 30,\n    \"isRecurring\": true,\n    \"recurringLimit\": 3,\n    \"memberLimit\": 5,\n    \"totalLimit\": 1000\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/rewards/{{rewardId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rewards",
								"{{rewardId}}"
							]
						},
						"description": "Update an existing reward"
					},
					"response": []
				},
				{
					"name": "Delete Reward",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/rewards/{{rewardId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rewards",
								"{{rewardId}}"
							]
						},
						"description": "Delete a reward by ID"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing rewards"
		},
		{
			"name": "Member Management",
			"item": [
				{
					"name": "Get All Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has items array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.exist;",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/members?page=1&pageSize=20&programId={{programId}}&status=Active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"members"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								},
								{
									"key": "programId",
									"value": "{{programId}}",
									"description": "Filter by loyalty program"
								},
								{
									"key": "status",
									"value": "Active",
									"description": "Filter by membership status"
								}
							]
						},
						"description": "Get a paginated list of all members"
					},
					"response": []
				},
				{
					"name": "Get Member by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Member has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.email).to.exist;",
									"    pm.expect(jsonData.programId).to.exist;",
									"    pm.expect(jsonData.membershipId).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/members/{{memberId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"members",
								"{{memberId}}"
							]
						},
						"description": "Get a member by their ID"
					},
					"response": []
				},
				{
					"name": "Create Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has member ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"memberId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programId\": \"{{programId}}\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"phone\": \"+1-555-123-4567\",\n    \"birthDate\": \"1985-06-15\",\n    \"address\": {\n        \"line1\": \"789 Maple Avenue\",\n        \"line2\": \"Apt 42\",\n        \"city\": \"Seattle\",\n        \"state\": \"WA\",\n        \"postalCode\": \"98101\",\n        \"country\": \"USA\"\n    },\n    \"preferences\": {\n        \"favoriteCategories\": [\"Coffee\", \"Breakfast\"],\n        \"communicationPreferences\": {\n            \"email\": true,\n            \"sms\": true,\n            \"push\": false\n        }\n    },\n    \"enrollmentSource\": \"Website\",\n    \"referredBy\": null\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"members"
							]
						},
						"description": "Create a new member"
					},
					"response": []
				},
				{
					"name": "Update Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated member\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.email).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programId\": \"{{programId}}\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"johnsmith@example.com\",\n    \"phone\": \"+1-555-987-6543\",\n    \"birthDate\": \"1985-06-15\",\n    \"address\": {\n        \"line1\": \"123 Oak Street\",\n        \"line2\": \"Suite 302\",\n        \"city\": \"Seattle\",\n        \"state\": \"WA\",\n        \"postalCode\": \"98102\",\n        \"country\": \"USA\"\n    },\n    \"preferences\": {\n        \"favoriteCategories\": [\"Coffee\", \"Breakfast\", \"Lunch\"],\n        \"communicationPreferences\": {\n            \"email\": true,\n            \"sms\": false,\n            \"push\": true\n        }\n    },\n    \"status\": \"Active\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/members/{{memberId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"members",
								"{{memberId}}"
							]
						},
						"description": "Update an existing member"
					},
					"response": []
				},
				{
					"name": "Add Points to Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated points balance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pointsBalance).to.exist;",
									"    pm.expect(jsonData.pointsBalance).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"points\": 500,\n    \"reason\": \"Purchase\",\n    \"transactionReference\": \"ORDER-12345\",\n    \"storeId\": \"{{storeId}}\",\n    \"notes\": \"Points for coffee purchase\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/members/{{memberId}}/points/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"members",
								"{{memberId}}",
								"points",
								"add"
							]
						},
						"description": "Add points to a member's account"
					},
					"response": []
				},
				{
					"name": "Deduct Points from Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated points balance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pointsBalance).to.exist;",
									"    pm.expect(jsonData.pointsBalance).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"points\": 200,\n    \"reason\": \"Reward Redemption\",\n    \"transactionReference\": \"REDEEM-6789\",\n    \"storeId\": \"{{storeId}}\",\n    \"rewardId\": \"{{rewardId}}\",\n    \"notes\": \"Redemption for free coffee\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/members/{{memberId}}/points/deduct",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"members",
								"{{memberId}}",
								"points",
								"deduct"
							]
						},
						"description": "Deduct points from a member's account"
					},
					"response": []
				},
				{
					"name": "Get Member Points History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has transactions array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.exist;",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/members/{{memberId}}/points/history?page=1&pageSize=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"members",
								"{{memberId}}",
								"points",
								"history"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								}
							]
						},
						"description": "Get the points transaction history for a member"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing loyalty program members"
		},
		{
			"name": "Campaign Management",
			"item": [
				{
					"name": "Get All Campaigns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has items array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.exist;",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/campaigns?page=1&pageSize=20&programId={{programId}}&status=Active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"campaigns"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								},
								{
									"key": "programId",
									"value": "{{programId}}",
									"description": "Filter by loyalty program"
								},
								{
									"key": "status",
									"value": "Active",
									"description": "Filter by campaign status"
								}
							]
						},
						"description": "Get a paginated list of all campaigns"
					},
					"response": []
				},
				{
					"name": "Get Campaign by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Campaign has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.programId).to.exist;",
									"    pm.expect(jsonData.startDate).to.exist;",
									"    pm.expect(jsonData.rules).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/campaigns/{{campaignId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"campaigns",
								"{{campaignId}}"
							]
						},
						"description": "Get a campaign by its ID"
					},
					"response": []
				},
				{
					"name": "Create Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has campaign ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.environment.set(\"campaignId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Summer Coffee Promotion\",\n    \"description\": \"Double points on all coffee purchases during summer\",\n    \"programId\": \"{{programId}}\",\n    \"startDate\": \"2023-06-01T00:00:00Z\",\n    \"endDate\": \"2023-08-31T23:59:59Z\",\n    \"status\": \"Active\",\n    \"rules\": [\n        {\n            \"type\": \"PointMultiplier\",\n            \"config\": {\n                \"multiplier\": 2.0,\n                \"productCategories\": [\"Coffee\", \"Espresso\"],\n                \"dayOfWeek\": null,\n                \"timeRange\": null,\n                \"storeIds\": null\n            }\n        }\n    ],\n    \"memberSegments\": [\n        {\n            \"type\": \"AllMembers\"\n        }\n    ],\n    \"budget\": {\n        \"maxPoints\": 100000,\n        \"maxRedemptions\": null\n    },\n    \"priority\": 10,\n    \"tags\": [\"summer\", \"promotion\", \"coffee\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/campaigns",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"campaigns"
							]
						},
						"description": "Create a new campaign"
					},
					"response": []
				},
				{
					"name": "Update Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated campaign\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Summer Coffee Promotion Extended\",\n    \"description\": \"Double points on all coffee purchases during summer and early fall\",\n    \"programId\": \"{{programId}}\",\n    \"startDate\": \"2023-06-01T00:00:00Z\",\n    \"endDate\": \"2023-09-30T23:59:59Z\",\n    \"status\": \"Active\",\n    \"rules\": [\n        {\n            \"type\": \"PointMultiplier\",\n            \"config\": {\n                \"multiplier\": 2.0,\n                \"productCategories\": [\"Coffee\", \"Espresso\", \"Cold Brew\"],\n                \"dayOfWeek\": null,\n                \"timeRange\": null,\n                \"storeIds\": null\n            }\n        }\n    ],\n    \"memberSegments\": [\n        {\n            \"type\": \"AllMembers\"\n        }\n    ],\n    \"budget\": {\n        \"maxPoints\": 150000,\n        \"maxRedemptions\": null\n    },\n    \"priority\": 10,\n    \"tags\": [\"summer\", \"promotion\", \"coffee\", \"fall\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/campaigns/{{campaignId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"campaigns",
								"{{campaignId}}"
							]
						},
						"description": "Update an existing campaign"
					},
					"response": []
				},
				{
					"name": "Delete Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/campaigns/{{campaignId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"campaigns",
								"{{campaignId}}"
							]
						},
						"description": "Delete a campaign by ID"
					},
					"response": []
				},
				{
					"name": "Get Campaign Performance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has performance metrics\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.totalPoints).to.exist;",
									"    pm.expect(jsonData.totalMembers).to.exist;",
									"    pm.expect(jsonData.dailyStats).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/campaigns/{{campaignId}}/performance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"campaigns",
								"{{campaignId}}",
								"performance"
							]
						},
						"description": "Get performance metrics for a campaign"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing promotional campaigns"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:5001",
			"type": "string"
		}
	]
} 